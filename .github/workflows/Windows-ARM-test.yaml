name: OCV PR Windows ARM

on:
  pull_request:
    branches: [ main-warm ]
  push:
    branches: [ main-warm ]
  workflow_dispatch:
    inputs:
      runner:
        description: 'Runner label (windows-11-arm for public repos)'
        required: true
        default: 'windows-11-arm'

jobs:
  Build:
    runs-on: windows-11-arm
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        branch: ${{ fromJSON(needs.branch_eval.outputs.branches) }}
    defaults:
      run:
        shell: bash
    env:
      CMAKE_OPT: >-
        -DCL_Z_OPTION=/Z7
        -DBUILD_EXAMPLES=ON
        -DOPENCV_ENABLE_NONFREE=ON
        -DWITH_OPENCL=OFF
      MAIN_BUILD_DIR: "build-arm"
      OPENCV_FOR_THREADS_NUM: 8
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: opencv/ci-gha-workflow
          ref: "${{ github.repository == 'opencv/ci-gha-workflow' && github.ref || inputs.workflow_branch }}"

      - name: Checkout and merge OpenCV
        uses: ./checkout-and-merge
        with:
          target_branch: '${{ matrix.branch }}'
          author: '${{ github.event.pull_request.user.login }}'
          source_branch: "${{ github.event.repository.name == 'ci-gha-workflow' && '' || github.head_ref }}"
          gitcache: '${{ env.GIT_CACHE }}'
          workdir: '${{ github.workspace }}'

      - name: Update extra dnn models
        timeout-minutes: 60
        working-directory: '${{ github.workspace }}'
        run: |
          python opencv_extra/testdata/dnn/download_models.py \
            --cleanup \
            --dst "${{ github.workspace }}/.dnn"
          echo "OPENCV_DNN_TEST_DATA_PATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Configure and build OpenCV (ARM64)
        uses: ./configure-and-build
        with:
          workdir: '${{ github.workspace }}'
          builddir: 'build-arm'
          generator: 'Visual Studio 17 2022'
          options: >-
            -A ARM64
            ${{ env.CMAKE_OPT }}

      - name: Configure and build OpenCV with contrib (ARM64)
        uses: ./configure-and-build
        with:
          workdir: '${{ github.workspace }}'
          builddir: 'build-contrib-arm'
          generator: 'Visual Studio 17 2022'
          options: >-
            -A ARM64
            -DOPENCV_EXTRA_MODULES_PATH=opencv_contrib/modules
            ${{ env.CMAKE_OPT }}
