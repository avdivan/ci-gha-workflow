name: "OCV PR Windows ARM"

on:
  pull_request:
    branches: [ main-warm ]
  push:
    branches: [ main-warm ]
  workflow_dispatch:
    inputs:
      runner:
        description: "Runner label (windows-11-arm for public repos)"
        required: true
        default: "windows-11-arm"
      opencv_branch:
        description: "OpenCV branch to build (e.g. 4.x or 5.x)"
        required: false
        default: "5.x"

jobs:
  branch_eval:
    runs-on: ubuntu-24.04
    outputs:
      branches: ${{ steps.out.outputs.branches }}
    steps:
      - id: out
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.opencv_branch }}" ]; then
            echo "branches=[ '${{ inputs.opencv_branch }}' ]" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          if [ "${{ github.event.repository.name == 'ci-gha-workflow' }}" = "true" ] ; then
            echo "branches=[ '4.x', '5.x' ]" >> "$GITHUB_OUTPUT"
          else
            echo "branches=[ '${{ github.base_ref || github.ref_name }}' ]" >> "$GITHUB_OUTPUT"
          fi

  Build:
    runs-on: ${{ github.event_name == 'workflow_dispatch' && inputs.runner || 'windows-11-arm' }}
    needs: [branch_eval]
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        branch: ${{ fromJSON(needs.branch_eval.outputs.branches) }}
    defaults:
      run:
        shell: bash
    env:
      CMAKE_OPT: >-
        -DCL_Z_OPTION=/Z7
        -DBUILD_EXAMPLES=ON
        -DOPENCV_ENABLE_NONFREE=ON
        -DWITH_OPENCL=OFF
      MAIN_BUILD_DIR: "build-arm"
      OPENCV_FOR_THREADS_NUM: 8
      CMAKE_BUILD_PARALLEL_LEVEL: 8

    steps:
      - name: Checkout workflow repository
        uses: actions/checkout@v4
        with:
          repository: opencv/ci-gha-workflow
          ref: "${{ github.repository == 'opencv/ci-gha-workflow' && github.ref || inputs.workflow_branch }}"

      - name: Checkout and merge OpenCV
        uses: ./checkout-and-merge
        with:
          target_branch: '${{ matrix.branch }}'
          author: '${{ github.event.pull_request.user.login }}'
          source_branch: "${{ github.event.repository.name == 'ci-gha-workflow' && '' || github.head_ref }}"
          gitcache: '${{ env.GIT_CACHE }}'
          workdir: '${{ github.workspace }}'
          
      - name: Install Python deps for DNN model download
        run: python -m pip install requests
        
      - name: Update extra dnn models (best-effort)
        continue-on-error: true
        working-directory: '${{ github.workspace }}'
        run: |
          python opencv_extra/testdata/dnn/download_models.py \
            --cleanup \
            --dst "${{ github.workspace }}/.dnn"
          echo "OPENCV_DNN_TEST_DATA_PATH=${{ github.workspace }}" >> $GITHUB_ENV

      - name: Configure and build OpenCV (ARM64)
        uses: ./configure-and-build
        with:
          workdir: '${{ github.workspace }}'
          builddir: 'build-arm'
          generator: '"Visual Studio 17 2022"'
          options: >-
            -A ARM64
            ${{ env.CMAKE_OPT }}

      - name: Configure and build OpenCV with contrib (ARM64)
        uses: ./configure-and-build
        with:
          workdir: '${{ github.workspace }}'
          builddir: 'build-contrib-arm'
          generator: '"Visual Studio 17 2022"'
          options: >-
            -A ARM64
            -DOPENCV_EXTRA_MODULES_PATH=opencv_contrib/modules
            ${{ env.CMAKE_OPT }}
