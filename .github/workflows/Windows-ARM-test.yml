name: OCV PR Windows 11 ARM

on:
  pull_request:
    branches: [ main-warm ]
    
    paths:
      - '.github/workflows/Windows-ARM-test.yml'
  workflow_call:
jobs:
  Build:
    runs-on: windows-11-arm
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']
        platform: [arm64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      SDIST: ${{ matrix.build_sdist || 0 }}
      ENABLE_HEADLESS: ${{ matrix.without_gui }}
      ENABLE_CONTRIB: ${{ matrix.with_contrib }}
      OPENCV_TEST_DATA_PATH: ${{ github.workspace }}\opencv_extra\testdata
    steps:
    - name: Cleanup
      shell: bash
      run: |
        rm -rf ./* || true
        rm -rf ./.??* || true
      working-directory: ${{ github.workspace }}
    - name: Setup environment
      shell: bash
      run: |
        if [[ "${{ github.event_name }}" == "schedule" || "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "ENABLE_ROLLING=1" >> $GITHUB_ENV
        fi
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: false
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.platform }}
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1
      with:
        msbuild-architecture: arm64
    - name: Build a package
      run: |
        python --version
        python -m pip install --upgrade pip
        python -m pip install --upgrade setuptools
        python -m pip install cmake==4.1.0
        python -m pip install toml && python -c "import toml; c = toml.load('pyproject.toml'); print('\n'.join(c['build-system']['requires']))" >> requirements.txt | python -m pip install -r requirements.txt
        set "CI_BUILD=1" && python setup.py bdist_wheel --py-limited-api=cp37 --dist-dir=%cd%\wheelhouse -v
      shell: cmd
    - name: Saving all wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}-${{ matrix.platform }}
        path: wheelhouse/opencv*

  Test:
    needs: [Build]
    runs-on: windows-11-arm
    defaults:
      run:
        shell: cmd
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12', '3.13']
        platform: [arm64]
        with_contrib: [0, 1]
        without_gui: [0, 1]
        build_sdist: [0]
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      OPENCV_TEST_DATA_PATH: ${{ github.workspace }}\opencv_extra\testdata
      PYLINT_TEST_FILE: ${{ github.workspace }}\opencv\samples\python\squares.py
      PlatformToolset: v143
    steps:
    - name: Cleanup
      shell: bash
      run: |
        rm -rf ./* || true
        rm -rf ./.??* || true
      working-directory: ${{ github.workspace }}
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.platform }}
    - name: Download a wheel accordingly to matrix
      uses: actions/download-artifact@v4
      with:
        name: wheel-${{ matrix.with_contrib }}-${{ matrix.without_gui }}-${{ matrix.build_sdist }}-${{ matrix.platform }}
        path: wheelhouse/
    - name: Package installation
      run: |
        cd ${{ github.workspace }}/tests
        &python -m pip install --user --no-warn-script-location (ls "../wheelhouse/opencv*.whl")
        if ($LastExitCode -ne 0) {throw $LastExitCode}
        python get_build_info.py
      shell: powershell
    - name: Run tests
      run: |
        cd ${{ github.workspace }}/opencv
        python modules\python\test\test.py -v --repo .
    - name: Pylint test
      run: |
        python -m pip install pylint==2.15.9
        cd ${{ github.workspace }}\tests
        python -m pylint $PYLINT_TEST_FILE
